const loginWindow = document.getElementById('loginWindow');
const timerWindow = document.getElementById('timerWindow');
const loginBtn = document.getElementById('loginBtn');
const logoutBtn = document.getElementById('logoutBtn');
const testBtn = document.getElementById('testBtn');
const statusDiv = document.getElementById('status');
const timerDiv = document.getElementById('timer');

let timerInterval;
let secondsElapsed = 0;
let sessionStartTime = null;
let generateCount = 0;
let autoLogoutTimer = null;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const API_BASE_URL = "http://164.92.182.162:8000";
const AUTO_LOGOUT_HOURS = 4;
const AUTO_LOGOUT_MS = AUTO_LOGOUT_HOURS * 60 * 60 * 1000;

// –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
function formatTime(seconds) {
  const h = String(Math.floor(seconds / 3600)).padStart(2,'0');
  const m = String(Math.floor((seconds % 3600) / 60)).padStart(2,'0');
  const s = String(seconds % 60).padStart(2,'0');
  return `${h}:${m}:${s}`;
}

// === –°–ò–°–¢–ï–ú–ê –°–ü–û–í–Ü–©–ï–ù–¨ ===
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 10px;
    right: 10px;
    padding: 10px 15px;
    border-radius: 5px;
    color: white;
    font-size: 12px;
    z-index: 10000;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease;
    max-width: 200px;
    word-wrap: break-word;
  `;
  
  // –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
  const colors = {
    info: '#2196F3',
    success: '#4CAF50',
    warning: '#ff9800',
    error: '#f44336'
  };
  
  notification.style.background = colors[type] || colors.info;
  document.body.appendChild(notification);
  
  // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
  requestAnimationFrame(() => {
    notification.style.opacity = '1';
    notification.style.transform = 'translateX(0)';
  });
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(100%)';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

// === –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–ê–¢–£–°–£ –°–ï–†–í–ï–†–ê ===
async function checkServerStatus() {
  try {
    const response = await fetch(`${API_BASE_URL}/health`);
    return response.ok;
  } catch (error) {
    return false;
  }
}

// === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===
async function loadUserStats() {
  try {
    const { nts_token } = await chrome.storage.local.get(['nts_token']);
    if (!nts_token) return null;
    
    const response = await fetch(`${API_BASE_URL}/stats`, {
      headers: { 'Authorization': 'Bearer ' + nts_token }
    });
    
    if (response.ok) {
      return await response.json();
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
  return null;
}

// === –ü–ï–†–ï–í–Ü–†–ö–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ú–Ü–°–¶–Ø ===
async function getStorageUsage() {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ localStorage
    const allData = await chrome.storage.local.get(null);
    let totalSize = 0;
    let itemCount = 0;
    
    for (const [key, value] of Object.entries(allData)) {
      const itemSize = JSON.stringify(value).length;
      totalSize += itemSize;
      itemCount++;
    }
    
    // –õ—ñ–º—ñ—Ç–∏ Chrome Extension storage
    const maxStorage = 5 * 1024 * 1024; // 5MB –¥–ª—è chrome.storage.local
    const usagePercent = (totalSize / maxStorage) * 100;
    
    return {
      totalSize,
      itemCount,
      formattedSize: formatBytes(totalSize),
      maxStorage,
      formattedMaxSize: formatBytes(maxStorage),
      usagePercent: Math.round(usagePercent * 100) / 100,
      isNearLimit: usagePercent > 80,
      isOverLimit: usagePercent > 95
    };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ storage:', error);
    return { 
      totalSize: 0, 
      itemCount: 0, 
      formattedSize: '0 B',
      maxStorage: 5 * 1024 * 1024,
      formattedMaxSize: '5 MB',
      usagePercent: 0,
      isNearLimit: false,
      isOverLimit: false
    };
  }
}

// === –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –ë–ê–ô–¢–Ü–í ===
function formatBytes(bytes) {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// === –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ï–°–Ü–á ===
async function updateSessionStats() {
  const statsContainer = document.getElementById('sessionStats');
  if (!statsContainer) return;
  
  const sessionTime = Math.floor((Date.now() - sessionStartTime) / 1000);
  const hours = Math.floor(sessionTime / 3600);
  const minutes = Math.floor((sessionTime % 3600) / 60);
  
  // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è storage
  const storageInfo = await getStorageUsage();
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à—É
  let cacheColor = '#4CAF50'; // –∑–µ–ª–µ–Ω–∏–π
  let cacheStatus = '';
  
  if (storageInfo.isOverLimit) {
    cacheColor = '#f44336'; // —á–µ—Ä–≤–æ–Ω–∏–π
    cacheStatus = ' ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û';
  } else if (storageInfo.isNearLimit) {
    cacheColor = '#ff9800'; // –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
    cacheStatus = ' ‚ö†Ô∏è –ë–ê–ì–ê–¢–û';
  }
  
  statsContainer.innerHTML = `
    <div class="stat-item">
      <span class="stat-label">–ß–∞—Å —Å–µ—Å—ñ—ó:</span>
      <span class="stat-value">${hours}–≥ ${minutes}—Ö–≤</span>
    </div>
    <div class="stat-item">
      <span class="stat-label">Generate –Ω–∞—Ç–∏—Å–∫–∞–Ω—å:</span>
      <span class="stat-value">${generateCount}</span>
    </div>
    <div class="stat-item">
      <span class="stat-label">–ö–µ—à:</span>
      <span class="stat-value" style="color: ${cacheColor}">${storageInfo.formattedSize} / ${storageInfo.formattedMaxSize} (${storageInfo.usagePercent}%)${cacheStatus}</span>
    </div>
    <div class="stat-item">
      <span class="stat-label">–ï–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –∫–µ—à—ñ:</span>
      <span class="stat-value">${storageInfo.itemCount}</span>
    </div>
  `;
}

// === –î–û–î–ê–í–ê–ù–ù–Ø –®–í–ò–î–ö–ò–• –î–Ü–ô ===
async function addQuickActions() {
  console.log('‚ö° –î–æ–¥–∞—î–º–æ —à–≤–∏–¥–∫—ñ –¥—ñ—ó');
  const quickActionsContainer = document.getElementById('quickActions');
  if (!quickActionsContainer) {
    console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä quickActions –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const { nts_token } = await chrome.storage.local.get(['nts_token']);
  let isAdmin = false;
  
  if (nts_token) {
    try {
      const testResponse = await fetch(`${API_BASE_URL}/users/export?format=json`, {
        headers: { 'Authorization': 'Bearer ' + nts_token }
      });
      isAdmin = testResponse.ok;
    } catch (error) {
      console.log('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É:', error);
    }
  }
  
  // –§–æ—Ä–º—É—î–º–æ HTML –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
  let buttonsHTML = `
    <button class="quick-action-btn" id="timocomBtn">üåê Timocom</button>
    <button class="quick-action-btn" id="transEuBtn">üöö Trans.eu</button>
    <button class="quick-action-btn danger" id="clearBtn">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏</button>
  `;
  
  // –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
  if (isAdmin) {
    console.log('üëë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º - –¥–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏');
    buttonsHTML += `
      <button class="quick-action-btn" id="exportBtn">üìä –ï–∫—Å–ø–æ—Ä—Ç</button>
      <button class="quick-action-btn" id="importBtn">üì• –Ü–º–ø–æ—Ä—Ç</button>
      <button class="quick-action-btn" id="storageBtn">üíæ –ö–µ—à</button>
      <button class="quick-action-btn danger" id="clearStorageBtn">üßπ –ö–µ—à</button>
    `;
  } else {
    console.log('üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ');
  }
  
  quickActionsContainer.innerHTML = buttonsHTML;
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  try {
    document.getElementById('timocomBtn').addEventListener('click', openTimocom);
    document.getElementById('transEuBtn').addEventListener('click', openTransEu);
    document.getElementById('clearBtn').addEventListener('click', clearHistory);
    
    // –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–Ω–æ–ø–∫–∏ —ñ—Å–Ω—É—é—Ç—å
    if (isAdmin) {
      document.getElementById('exportBtn').addEventListener('click', exportHistory);
      document.getElementById('importBtn').addEventListener('click', importHistory);
      document.getElementById('storageBtn').addEventListener('click', showStorageDetails);
      document.getElementById('clearStorageBtn').addEventListener('click', clearStorage);
    }
    
    console.log('‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–æ–¥–∞–Ω–æ');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤:', error);
  }
  
  console.log('‚úÖ –®–≤–∏–¥–∫—ñ –¥—ñ—ó –¥–æ–¥–∞–Ω–æ –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏');
}

// === –®–í–ò–î–ö–Ü –î–Ü–á ===
window.openTimocom = function() {
  console.log('üåê –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Timocom');
  chrome.tabs.create({ url: 'https://my.timocom.com' });
}

window.openTransEu = function() {
  console.log('üöö –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Trans.eu');
  chrome.tabs.create({ url: 'https://platform.trans.eu/dashboards' });
}

window.exportHistory = async function() {
  console.log('üìä –ü–æ—á–∞—Ç–æ–∫ –µ–∫—Å–ø–æ—Ä—Ç—É');
  try {
    const { nts_token } = await chrome.storage.local.get(['nts_token']);
    if (!nts_token) {
      showNotification('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
      return;
    }
    
    const response = await fetch(`${API_BASE_URL}/users/export?format=json`, {
      headers: { 'Authorization': 'Bearer ' + nts_token }
    });
    
    if (response.ok) {
      const data = await response.json();
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `nts_export_${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      URL.revokeObjectURL(url);
      showNotification('–ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
    } else {
      showNotification('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: ' + response.status, 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞', 'error');
  }
}

window.clearHistory = function() {
  console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó');
  if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é?')) {
    chrome.storage.local.remove(['trans_history']);
    showNotification('–Ü—Å—Ç–æ—Ä—ñ—è –æ—á–∏—â–µ–Ω–∞', 'info');
  }
}

// === –û–ß–ò–©–ï–ù–ù–Ø –ö–ï–®–£ ===
window.clearStorage = async function() {
  console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É');
  
  const options = [
    '–û—á–∏—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É',
    '–û—á–∏—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —Ñ—ñ—Ä–º–∏', 
    '–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ –∫—Ä—ñ–º —Ç–æ–∫–µ–Ω–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö',
    '–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ –ø–æ–≤–Ω—ñ—Å—Ç—é (–≤–∫–ª—é—á–∞—é—á–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É)'
  ];
  
  const choice = prompt(`–©–æ —Å–∞–º–µ –æ—á–∏—Å—Ç–∏—Ç–∏?\n\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\n')}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (1-4):`);
  
  if (!choice || choice < 1 || choice > 4) return;
  
  try {
    switch (parseInt(choice)) {
      case 1:
        await chrome.storage.local.remove(['trans_history']);
        showNotification('–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –æ—á–∏—â–µ–Ω–∞', 'info');
        break;
        
      case 2:
        await chrome.storage.local.remove(['marked_tc_ids_1', 'marked_tc_ids_2']);
        showNotification('–ü–æ–∑–Ω–∞—á–µ–Ω—ñ —Ñ—ñ—Ä–º–∏ –æ—á–∏—â–µ–Ω—ñ', 'info');
        break;
        
      case 3:
        const { nts_token, nts_user_id, nts_remember_me, nts_saved_username, nts_saved_password } = await chrome.storage.local.get(['nts_token', 'nts_user_id', 'nts_remember_me', 'nts_saved_username', 'nts_saved_password']);
        await chrome.storage.local.clear();
        const preservedData = {};
        if (nts_token) preservedData.nts_token = nts_token;
        if (nts_user_id) preservedData.nts_user_id = nts_user_id;
        if (nts_remember_me) preservedData.nts_remember_me = nts_remember_me;
        if (nts_saved_username) preservedData.nts_saved_username = nts_saved_username;
        if (nts_saved_password) preservedData.nts_saved_password = nts_saved_password;
        await chrome.storage.local.set(preservedData);
        showNotification('–ö–µ—à –æ—á–∏—â–µ–Ω–æ (—Ç–æ–∫–µ–Ω —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ)', 'info');
        break;
        
      case 4:
        await chrome.storage.local.clear();
        showNotification('–í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω–æ (–≤–∫–ª—é—á–∞—é—á–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É)', 'info');
        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ popup
        setTimeout(() => window.location.reload(), 1000);
        break;
    }
    
  // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  updateSessionStats();
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏ –∫–µ—à—É —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
  checkStorageLimits();
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É', 'error');
  }
}

// === –Ü–ú–ü–û–†–¢ –Ü–°–¢–û–†–Ü–á ===
window.importHistory = function() {
  console.log('üì• –ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É');
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = '.json';
  input.onchange = async (event) => {
    const file = event.target.files[0];
    if (!file) return;
    
    try {
      const text = await file.text();
      const data = JSON.parse(text);
      
      if (data.users && Array.isArray(data.users)) {
        // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ API
        const { nts_token } = await chrome.storage.local.get(['nts_token']);
        if (!nts_token) {
          showNotification('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
          return;
        }
        
        
        let imported = 0;
        for (const user of data.users) {
          try {
            const response = await fetch(`${API_BASE_URL}/users`, {
              method: 'POST',
              headers: { 
                'Authorization': 'Bearer ' + nts_token,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                username: user.username,
                password: 'imported_user_' + Date.now()
              })
            });
            
            if (response.ok) {
              imported++;
            }
          } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
          }
        }
        
        showNotification(`–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${imported} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`, 'success');
      } else {
        showNotification('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É', 'error');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
      showNotification('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É', 'error');
    }
  };
  
  input.click();
}

// === –ü–ï–†–ï–í–Ü–†–ö–ê –õ–Ü–ú–Ü–¢–Ü–í –ö–ï–®–£ ===
async function checkStorageLimits() {
  try {
    const storageInfo = await getStorageUsage();
    
    if (storageInfo.isOverLimit) {
      showNotification('üö® –ö–†–ò–¢–ò–ß–ù–û! –ö–µ—à –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –Ω–∞ ' + storageInfo.usagePercent + '%! –û—á–∏—Å—Ç—ñ—Ç—å –∫–µ—à!', 'error');
    } else if (storageInfo.isNearLimit) {
      showNotification('‚ö†Ô∏è –£–í–ê–ì–ê! –ö–µ—à –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –Ω–∞ ' + storageInfo.usagePercent + '%', 'warning');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª—ñ–º—ñ—Ç—ñ–≤ –∫–µ—à—É:', error);
  }
}

// === –î–ï–¢–ê–õ–¨–ù–ò–ô –ü–ï–†–ï–ì–õ–Ø–î STORAGE ===
window.showStorageDetails = async function() {
  console.log('üíæ –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ storage');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
  const { nts_token } = await chrome.storage.local.get(['nts_token']);
  if (!nts_token) {
    showNotification('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
    return;
  }
  
  try {
    const testResponse = await fetch(`${API_BASE_URL}/users/export?format=json`, {
      headers: { 'Authorization': 'Bearer ' + nts_token }
    });
    
    if (!testResponse.ok) {
      showNotification('–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É. –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∫–µ—à—É', 'error');
      return;
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É', 'error');
    return;
  }
  
  try {
    const allData = await chrome.storage.local.get(null);
    let details = 'üìä –î–µ—Ç–∞–ª—ñ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞:\n\n';
    let totalSize = 0;
    
    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º
    const items = Object.entries(allData).map(([key, value]) => {
      const size = JSON.stringify(value).length;
      totalSize += size;
      return { key, value, size, formatted: formatBytes(size) };
    }).sort((a, b) => b.size - a.size);
    
    items.forEach(item => {
      let valuePreview;
      
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      if (item.key.includes('token') || item.key.includes('password') || item.key.includes('secret')) {
        const valueStr = typeof item.value === 'string' ? item.value : JSON.stringify(item.value);
        if (valueStr.length > 20) {
          valuePreview = valueStr.substring(0, 10) + '...' + valueStr.substring(valueStr.length - 10);
        } else {
          valuePreview = '***–ü–†–ò–•–û–í–ê–ù–û***';
        }
      } else {
        valuePreview = typeof item.value === 'string' 
          ? (item.value.length > 50 ? item.value.substring(0, 50) + '...' : item.value)
          : JSON.stringify(item.value).substring(0, 50) + (JSON.stringify(item.value).length > 50 ? '...' : '');
      }
      
      details += `üîë ${item.key}: ${item.formatted}\n`;
      details += `   üìù ${valuePreview}\n\n`;
    });
    
    const maxStorage = 5 * 1024 * 1024; // 5MB
    const usagePercent = (totalSize / maxStorage) * 100;
    
    details += `\nüìà –ó–∞–≥–∞–ª–æ–º: ${formatBytes(totalSize)} / ${formatBytes(maxStorage)} (${items.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)`;
    details += `\nüìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ${Math.round(usagePercent * 100) / 100}%`;
    
    if (usagePercent > 95) {
      details += `\nüö® –ö–†–ò–¢–ò–ß–ù–û! –ö–µ—à –º–∞–π–∂–µ –ø–æ–≤–Ω–∏–π!`;
    } else if (usagePercent > 80) {
      details += `\n‚ö†Ô∏è –£–í–ê–ì–ê! –ö–µ—à –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –±—ñ–ª—å—à –Ω—ñ–∂ –Ω–∞ 80%`;
    }
    
    details += `\n\nüí° –ü–æ—Ä–∞–¥–∏:`;
    details += `\n‚Ä¢ –û—á–∏—â–∞–π—Ç–µ —Å—Ç–∞—Ä—É —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É`;
    details += `\n‚Ä¢ –í–∏–¥–∞–ª—è–π—Ç–µ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —Ñ—ñ—Ä–º–∏`;
    details += `\n‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è: 5 MB`;
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –≤ alert (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ)
    alert(details);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π storage:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫–µ—à—É', 'error');
  }
}

// === –¢–ï–°–¢–û–í–ê –§–£–ù–ö–¶–Ü–Ø ===
async function testFunction() {
  try {
    const { nts_token } = await chrome.storage.local.get(['nts_token']);
    if (!nts_token) {
      showNotification('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
      return;
    }
    
    const response = await fetch(`${API_BASE_URL}/health`, {
      method: 'GET'
    });
    
    if (response.ok) {
      const data = await response.json();
      showNotification(`–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –°—Ç–∞—Ç—É—Å: ${data.status}`, 'success');
    } else {
      showNotification('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î', 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è', 'error');
  }
}

// === –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô LOGOUT ===
function startAutoLogout() {
  if (autoLogoutTimer) {
    clearTimeout(autoLogoutTimer);
  }
  
  autoLogoutTimer = setTimeout(() => {
    showNotification('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ 4 –≥–æ–¥–∏–Ω–∏', 'warning');
    performLogout();
  }, AUTO_LOGOUT_MS);
}

// === –ü–ï–†–ï–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–¢–û–†–Ü–ù–ö–ò ===
function reloadCurrentTab() {
  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
    if (tabs[0]) {
      chrome.tabs.reload(tabs[0].id);
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer() {
  if (timerInterval) {
    clearInterval(timerInterval);
  }
  
  timerInterval = setInterval(() => {
    if (sessionStartTime) {
      // –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å —Å–µ—Å—ñ—ó –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –ª–æ–≥—ñ–Ω—É
      secondsElapsed = Math.floor((Date.now() - sessionStartTime) / 1000);
    } else {
      secondsElapsed++;
    }
    
    timerDiv.textContent = formatTime(secondsElapsed);
    updateSessionStats();
  }, 1000);
  
  console.log("‚è±Ô∏è –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ");
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–π–º–µ—Ä –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É
async function showTimerWindow() {
  loginWindow.style.display = 'none';
  timerWindow.style.display = 'block';
  
  // –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Å–µ—Å—ñ—ó –∑ storage (—è–∫—â–æ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
  if (!sessionStartTime) {
    const { nts_session_start } = await chrome.storage.local.get(['nts_session_start']);
    if (nts_session_start) {
      sessionStartTime = nts_session_start;
      console.log("‚è±Ô∏è –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Å–µ—Å—ñ—ó –∑ storage");
    }
  }
  
  // –û–±—á–∏—Å–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Å–µ—Å—ñ—ó
  if (sessionStartTime) {
    secondsElapsed = Math.floor((Date.now() - sessionStartTime) / 1000);
    console.log(`‚è±Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Å–µ—Å—ñ—ó: ${formatTime(secondsElapsed)}`);
  }
  
  startTimer();
  startAutoLogout();
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = await loadUserStats();
  if (stats) {
    await displayUserInfo(stats);
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
  const serverOnline = await checkServerStatus();
  updateServerStatus(serverOnline);
  
  // –î–æ–¥–∞—î–º–æ —à–≤–∏–¥–∫—ñ –¥—ñ—ó
  await addQuickActions();
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏ –∫–µ—à—É
  checkStorageLimits();
}

// === –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –Ü–ù–§–û–†–ú–ê–¶–Ü–á –ü–†–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===
async function displayUserInfo(stats) {
  const userInfoContainer = document.getElementById('userInfo');
  if (!userInfoContainer) return;
  
  const { nts_user_id } = await chrome.storage.local.get(['nts_user_id']);
  
  userInfoContainer.innerHTML = `
    <div class="user-info">
      <div class="user-avatar">üë§</div>
      <div class="user-details">
        <div class="user-name">${nts_user_id || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}</div>
        <div class="user-stats">
          <span class="stat">–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${stats.totalUsers || 0}</span>
          <span class="stat">–ê–¥–º—ñ–Ω—ñ–≤: ${stats.adminCount || 0}</span>
        </div>
      </div>
    </div>
  `;
}

// === –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£ –°–ï–†–í–ï–†–ê ===
function updateServerStatus(isOnline) {
  const serverStatusContainer = document.getElementById('serverStatus');
  if (!serverStatusContainer) return;
  
  serverStatusContainer.innerHTML = `
    <div class="server-status ${isOnline ? 'online' : 'offline'}">
      <div class="status-dot"></div>
      <span>–°–µ—Ä–≤–µ—Ä ${isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'}</span>
    </div>
  `;
}

// === –í–ò–ö–û–ù–ê–ù–ù–Ø LOGOUT ===
function performLogout() {
  // –í–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–∫–µ–Ω —Ç–∞ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É
  chrome.storage.local.remove(['nts_token', 'nts_user_id', 'nts_session_start']);
  clearInterval(timerInterval);
  if (autoLogoutTimer) {
    clearTimeout(autoLogoutTimer);
  }
  
  // –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
  PopupTokenMonitor.stop();
  
  secondsElapsed = 0;
  sessionStartTime = null;
  generateCount = 0;
  timerDiv.textContent = '00:00:00';
  timerWindow.style.display = 'none';
  loginWindow.style.display = 'block';
  
  // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É
  reloadCurrentTab();
  
  showNotification('–í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ', 'info');
}

// === –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ß–ê–°–£ –°–ï–°–Ü–á ===
async function saveSessionTime() {
  if (sessionStartTime) {
    await chrome.storage.local.set({ nts_session_start: sessionStartTime });
    console.log("üíæ –ß–∞—Å —Å–µ—Å—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
  }
}

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å —Å–µ—Å—ñ—ó –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ popup
window.addEventListener('beforeunload', saveSessionTime);

// Logout
logoutBtn.addEventListener('click', performLogout);

// Test
testBtn.addEventListener('click', testFunction);

// Clear saved data
document.getElementById('clearSavedDataBtn').addEventListener('click', async () => {
  if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É?')) {
    await chrome.storage.local.remove(['nts_remember_me', 'nts_saved_username', 'nts_saved_password']);
    
    // –û—á–∏—â–∞—î–º–æ –ø–æ–ª—è —Ñ–æ—Ä–º–∏
    document.getElementById('userId').value = '';
    document.getElementById('token').value = '';
    document.getElementById('rememberMe').checked = false;
    
    showNotification('–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ', 'info');
    console.log("üóëÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É –æ—á–∏—â–µ–Ω–æ");
  }
});

// Login
loginBtn.addEventListener('click', async () => {
  const userId = document.getElementById('userId').value.trim();
  const token = document.getElementById('token').value.trim();
  const rememberMe = document.getElementById('rememberMe').checked;

  if (!userId || !token) {
    showNotification('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–∏–¥–≤–∞ –ø–æ–ª—è', 'warning');
    return;
  }

  try {
    const response = await fetch(`${API_BASE_URL}/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username: userId, password: token })
    });
    
    const data = await response.json();
    console.log("üìã –î–∞–Ω—ñ –ª–æ–≥—ñ–Ω—É:", data);
    
    if(data.token) {
      console.log("üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ chrome.storage");
      const sessionStartTime = Date.now();
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ "–ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –º–µ–Ω–µ"
      const storageData = { 
        nts_token: data.token, 
        nts_user_id: userId,
        nts_session_start: sessionStartTime
      };
      
      if (rememberMe) {
        storageData.nts_remember_me = true;
        storageData.nts_saved_username = userId;
        storageData.nts_saved_password = token;
        console.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É");
      } else {
        // –í–∏–¥–∞–ª—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —Ö–æ—á–µ —ó—Ö –∑–±–µ—Ä—ñ–≥–∞—Ç–∏
        await chrome.storage.local.remove(['nts_remember_me', 'nts_saved_username', 'nts_saved_password']);
        console.log("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É");
      }
      
      await chrome.storage.local.set(storageData);
      console.log("‚úÖ –¢–æ–∫–µ–Ω —Ç–∞ —á–∞—Å —Å–µ—Å—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
      
      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É
      reloadCurrentTab();
      
      // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∞–π–º–µ—Ä
      await showTimerWindow();
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
      PopupTokenMonitor.start();
    } else {
      console.log("‚ùå –õ–æ–≥—ñ–Ω –Ω–µ –≤–¥–∞–≤—Å—è");
      showNotification('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É', 'error');
    }
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ fetch:", err);
    showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞', 'error');
  }
});

// === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===
async function initializePopup() {
  const { 
    nts_token, 
    nts_generate_count, 
    nts_session_start, 
    nts_remember_me, 
    nts_saved_username, 
    nts_saved_password 
  } = await chrome.storage.local.get([
    'nts_token', 
    'nts_generate_count', 
    'nts_session_start', 
    'nts_remember_me', 
    'nts_saved_username', 
    'nts_saved_password'
  ]);
  
  if (nts_token) {
    console.log("üîÑ –¢–æ–∫–µ–Ω –≤–∂–µ —î, –ø–æ–∫–∞–∑—É—î–º–æ —Ç–∞–π–º–µ—Ä");
    generateCount = nts_generate_count || 0;
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Å–µ—Å—ñ—ó –∑ storage
    if (nts_session_start) {
      sessionStartTime = nts_session_start;
      secondsElapsed = Math.floor((Date.now() - sessionStartTime) / 1000);
      console.log(`‚è±Ô∏è –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Å—ñ—é: ${formatTime(secondsElapsed)}`);
    }
    
    await showTimerWindow();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
    PopupTokenMonitor.start();
  } else {
    console.log("üîë –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ä–º—É –ª–æ–≥—ñ–Ω—É");
    
    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–∞–Ω—ñ—à–µ –≤–∏–±—Ä–∞–≤ "–ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –º–µ–Ω–µ"
    if (nts_remember_me && nts_saved_username && nts_saved_password) {
      document.getElementById('userId').value = nts_saved_username;
      document.getElementById('token').value = nts_saved_password;
      document.getElementById('rememberMe').checked = true;
      console.log("üíæ –ó–∞–ø–æ–≤–Ω–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É");
    }
  }
}

// === –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –¢–û–ö–ï–ù–ê ===
class PopupTokenMonitor {
  static checkInterval = null;
  
  static start() {
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –ª–æ–≥—ñ–Ω—É
    setTimeout(() => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
      this.checkInterval = setInterval(() => {
        this.checkTokenStatus();
      }, 10000);
      
      console.log("üîç PopupTokenMonitor: –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞");
    }, 30000);
  }
  
  static stop() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
      console.log("üõë PopupTokenMonitor: –ó—É–ø–∏–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞");
    }
  }
  
  static async checkTokenStatus() {
    try {
      const { nts_token } = await chrome.storage.local.get(['nts_token']);
      if (!nts_token) {
        console.log("üîç PopupTokenMonitor: –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
      }
      
      const response = await fetch(`${API_BASE_URL}/token-status`, {
        method: 'GET',
        headers: { 'Authorization': 'Bearer ' + nts_token }
      });
      
      if (!response.ok) {
        if (response.status === 401 || response.status === 403) {
          console.log("üîç PopupTokenMonitor: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, –≤–∏–∫–æ–Ω—É—î–º–æ logout");
          performLogout();
        } else if (response.status === 404) {
          console.log("üîç PopupTokenMonitor: Endpoint /token-status –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /verify");
          // Fallback –¥–æ /verify endpoint
          const verifyResponse = await fetch(`${API_BASE_URL}/verify`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ token: nts_token })
          });
          
          if (!verifyResponse.ok) {
            console.log("üîç PopupTokenMonitor: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —á–µ—Ä–µ–∑ /verify");
            performLogout();
          } else {
            console.log("‚úÖ PopupTokenMonitor: –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π —á–µ—Ä–µ–∑ /verify");
          }
        } else {
          console.log("üîç PopupTokenMonitor: –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É");
        }
      } else {
        console.log("‚úÖ PopupTokenMonitor: –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π");
      }
    } catch (error) {
      console.error("üîç PopupTokenMonitor: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error);
      // –ù–µ –≤–∏–∫–æ–Ω—É—î–º–æ logout –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö –º–µ—Ä–µ–∂—ñ
    }
  }
}

// === –°–õ–£–•–ê–ß –ó–ú–Ü–ù STORAGE ===
chrome.storage.onChanged.addListener((changes, namespace) => {
  if (namespace === 'local') {
    // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π (logout –∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ)
    if (changes.nts_token && !changes.nts_token.newValue) {
      console.log("üîÑ Popup: –¢–æ–∫–µ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ, –≤–∏–∫–æ–Ω—É—î–º–æ logout");
      performLogout();
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ generate
    if (changes.nts_generate_count) {
      generateCount = changes.nts_generate_count.newValue || 0;
      updateSessionStats();
    }
  }
});

// === –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ü–ï–†–ï–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ü–†–ò –ó–ú–Ü–ù–Ü –¢–û–ö–ï–ù–ê ===
chrome.storage.onChanged.addListener((changes, namespace) => {
  if (namespace === 'local' && changes.nts_token) {
    // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π (logout –∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ)
    if (!changes.nts_token.newValue) {
      console.log("üîÑ Popup: –¢–æ–∫–µ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤–∫–ª–∞–¥–∫—É");
      reloadCurrentTab();
    }
  }
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
initializePopup();
