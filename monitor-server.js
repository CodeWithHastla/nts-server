const os = require('os');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
const config = {
  logFile: './logs/monitor.log',
  healthCheckInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
  memoryThreshold: 80, // –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
  diskThreshold: 90, // –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫–∞
  maxLogSize: 10 * 1024 * 1024, // 10MB
  maxLogFiles: 5
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
function logMessage(level, message) {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] [${level.toUpperCase()}] ${message}\n`;
  
  // –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(logEntry.trim());
  
  // –ó–∞–ø–∏—Å—É—î–º–æ –≤ —Ñ–∞–π–ª
  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É logs —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    const logsDir = path.dirname(config.logFile);
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
    }
    
    fs.appendFileSync(config.logFile, logEntry);
    
    // –û—á–∏—â–∞—î–º–æ –ª–æ–≥–∏ —è–∫—â–æ –≤–æ–Ω–∏ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫—ñ
    cleanupLogs();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥ —Ñ–∞–π–ª:', error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤
function cleanupLogs() {
  try {
    if (!fs.existsSync(config.logFile)) {
      return;
    }
    
    const stats = fs.statSync(config.logFile);
    if (stats.size > config.maxLogSize) {
      // –†–æ—Ç–∞—Ü—ñ—è –ª–æ–≥—ñ–≤
      for (let i = config.maxLogFiles - 1; i > 0; i--) {
        const oldFile = `${config.logFile}.${i}`;
        const newFile = `${config.logFile}.${i + 1}`;
        
        if (fs.existsSync(oldFile)) {
          if (i === config.maxLogFiles - 1) {
            fs.unlinkSync(oldFile); // –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π —Ñ–∞–π–ª
          } else {
            fs.renameSync(oldFile, newFile);
          }
        }
      }
      
      // –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª
      fs.renameSync(config.logFile, `${config.logFile}.1`);
      logMessage('info', '–õ–æ–≥ —Ñ–∞–π–ª —Ä–æ—Ç–∞—Ü—ñ–π–Ω–∏–π —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
function getSystemInfo() {
  const totalMem = os.totalmem();
  const freeMem = os.freemem();
  const usedMem = totalMem - freeMem;
  const memUsagePercent = (usedMem / totalMem) * 100;
  
  const cpus = os.cpus();
  const cpuModel = cpus[0].model;
  const cpuCount = cpus.length;
  
  // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∏—Å–∫
  let diskUsage = null;
  try {
    const stats = fs.statSync('.');
    // –ü—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏
    diskUsage = { available: true };
  } catch (error) {
    diskUsage = { available: false, error: error.message };
  }
  
  const uptime = os.uptime();
  const uptimeHours = Math.floor(uptime / 3600);
  const uptimeMinutes = Math.floor((uptime % 3600) / 60);
  
  return {
    memory: {
      total: totalMem,
      free: freeMem,
      used: usedMem,
      usagePercent: Math.round(memUsagePercent * 100) / 100
    },
    cpu: {
      model: cpuModel,
      count: cpuCount
    },
    disk: diskUsage,
    uptime: {
      seconds: uptime,
      hours: uptimeHours,
      minutes: uptimeMinutes,
      formatted: `${uptimeHours}h ${uptimeMinutes}m`
    },
    platform: os.platform(),
    arch: os.arch(),
    nodeVersion: process.version,
    timestamp: new Date().toISOString()
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞
function checkServerHealth() {
  const systemInfo = getSystemInfo();
  const alerts = [];
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–º'—è—Ç—ñ
  if (systemInfo.memory.usagePercent > config.memoryThreshold) {
    alerts.push({
      type: 'memory',
      level: 'warning',
      message: `–í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ: ${systemInfo.memory.usagePercent}%`
    });
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Å–∫–∞
  if (systemInfo.disk.available === false) {
    alerts.push({
      type: 'disk',
      level: 'error',
      message: `–ü—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∏—Å–∫–æ–º: ${systemInfo.disk.error}`
    });
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ uptime
  if (systemInfo.uptime.hours > 24 * 7) { // –ë—ñ–ª—å—à–µ —Ç–∏–∂–Ω—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    alerts.push({
      type: 'uptime',
      level: 'info',
      message: `–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É: ${systemInfo.uptime.formatted}`
    });
  }
  
  return {
    status: alerts.length === 0 ? 'healthy' : 'warning',
    alerts: alerts,
    systemInfo: systemInfo
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É PM2 –ø—Ä–æ—Ü–µ—Å—ñ–≤
function checkPM2Status() {
  return new Promise((resolve) => {
    const { exec } = require('child_process');
    
    exec('pm2 jlist', (error, stdout, stderr) => {
      if (error) {
        logMessage('error', `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É PM2: ${error.message}`);
        resolve({ error: error.message });
        return;
      }
      
      try {
        const pm2Data = JSON.parse(stdout);
        const ntsServer = pm2Data.find(app => app.name === 'nts-server');
        
        if (ntsServer) {
          resolve({
            status: ntsServer.pm2_env.status,
            uptime: ntsServer.pm2_env.uptime,
            memory: ntsServer.monit.memory,
            cpu: ntsServer.monit.cpu,
            restarts: ntsServer.pm2_env.restart_time,
            pid: ntsServer.pid
          });
        } else {
          resolve({ error: 'NTS Server –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ PM2' });
        }
      } catch (parseError) {
        logMessage('error', `–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É PM2 –¥–∞–Ω–∏—Ö: ${parseError.message}`);
        resolve({ error: '–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É PM2 –¥–∞–Ω–∏—Ö' });
      }
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
async function startMonitoring() {
  logMessage('info', '–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É NTS Server');
  
  const monitorInterval = setInterval(async () => {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
      const healthCheck = checkServerHealth();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PM2 —Å—Ç–∞—Ç—É—Å—É
      const pm2Status = await checkPM2Status();
      
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      logMessage('info', `–°–∏—Å—Ç–µ–º–∞: ${healthCheck.status}, PM2: ${pm2Status.status || 'unknown'}`);
      logMessage('info', `–ü–∞–º'—è—Ç—å: ${healthCheck.systemInfo.memory.usagePercent}%, Uptime: ${healthCheck.systemInfo.uptime.formatted}`);
      
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
      if (healthCheck.alerts.length > 0) {
        healthCheck.alerts.forEach(alert => {
          logMessage(alert.level, alert.message);
        });
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PM2 —Å—Ç–∞—Ç—É—Å—É
      if (pm2Status.error) {
        logMessage('error', `PM2: ${pm2Status.error}`);
      } else if (pm2Status.status !== 'online') {
        logMessage('warning', `PM2 —Å—Ç–∞—Ç—É—Å: ${pm2Status.status}`);
      }
      
    } catch (error) {
      logMessage('error', `–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: ${error.message}`);
    }
  }, config.healthCheckInterval);
  
  // –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  process.on('SIGINT', () => {
    logMessage('info', '–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
    clearInterval(monitorInterval);
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    logMessage('info', '–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...');
    clearInterval(monitorInterval);
    process.exit(0);
  });
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
module.exports = {
  getSystemInfo,
  checkServerHealth,
  checkPM2Status,
  startMonitoring,
  logMessage
};

// –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
if (require.main === module) {
  console.log('üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É NTS Server...');
  startMonitoring();
}

