// –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑–ø–µ–∫–∏
const API_BASE_URL = "http://164.92.182.162:8000";

// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
const testData = {
  allowedIP: "192.168.1.100",
  allowedIPDesc: "–¢–µ—Å—Ç–æ–≤–∏–π –æ—Ñ—ñ—Å",
  blockedIP: "192.168.1.200", 
  blockedIPReason: "–¢–µ—Å—Ç–æ–≤–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"
};

async function testSecurityAPI() {
  console.log("üîí –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –±–µ–∑–ø–µ–∫–∏...");
  
  try {
    // –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–ø–µ–∫–∏
    console.log("\n1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–ø–µ–∫–∏:");
    const statsResponse = await fetch(`${API_BASE_URL}/security/stats`);
    console.log("–°—Ç–∞—Ç—É—Å:", statsResponse.status);
    if (statsResponse.ok) {
      const stats = await statsResponse.json();
      console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–ø–µ–∫–∏:", stats);
    } else {
      console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    }
    
    // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö IP
    console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö IP:");
    const allowedResponse = await fetch(`${API_BASE_URL}/security/allowed-ips`);
    console.log("–°—Ç–∞—Ç—É—Å:", allowedResponse.status);
    if (allowedResponse.ok) {
      const allowed = await allowedResponse.json();
      console.log("‚úÖ –î–æ–∑–≤–æ–ª–µ–Ω—ñ IP:", allowed);
    } else {
      console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö IP");
    }
    
    // –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö IP
    console.log("\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö IP:");
    const blockedResponse = await fetch(`${API_BASE_URL}/security/blocked-ips`);
    console.log("–°—Ç–∞—Ç—É—Å:", blockedResponse.status);
    if (blockedResponse.ok) {
      const blocked = await blockedResponse.json();
      console.log("‚úÖ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ IP:", blocked);
    } else {
      console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö IP");
    }
    
    // –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é
    console.log("\n4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π:");
    const sessionsResponse = await fetch(`${API_BASE_URL}/sessions`);
    console.log("–°—Ç–∞—Ç—É—Å:", sessionsResponse.status);
    if (sessionsResponse.ok) {
      const sessions = await sessionsResponse.json();
      console.log("‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó:", sessions);
    } else {
      console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ–π");
    }
    
    console.log("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    
  } catch (error) {
    console.error("üí• –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (typeof window !== 'undefined') {
  // –í –±—Ä–∞—É–∑–µ—Ä—ñ
  window.testSecurityAPI = testSecurityAPI;
  console.log("üîí –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –í–∏–∫–ª–∏—á—Ç–µ testSecurityAPI() –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤.");
} else {
  // –í Node.js
  testSecurityAPI();
}

