const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è backup
const config = {
  databasePath: './database.db',
  backupDir: './backups',
  retentionDays: 30, // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è backup —Ñ–∞–π–ª—ñ–≤
  maxBackups: 50 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å backup —Ñ–∞–π–ª—ñ–≤
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è backup
function createBackup() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupName = `database_backup_${timestamp}.db`;
  const backupPath = path.join(config.backupDir, backupName);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É backups —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
  if (!fs.existsSync(config.backupDir)) {
    fs.mkdirSync(config.backupDir, { recursive: true });
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É backups: ${config.backupDir}`);
  }
  
  try {
    // –ö–æ–ø—ñ—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    fs.copyFileSync(config.databasePath, backupPath);
    console.log(`‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${backupName}`);
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ backup —Ñ–∞–π–ª–∏
    cleanupOldBackups();
    
    return {
      success: true,
      filename: backupName,
      path: backupPath,
      size: fs.statSync(backupPath).size
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è backup:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup —Ñ–∞–π–ª—ñ–≤
function cleanupOldBackups() {
  try {
    if (!fs.existsSync(config.backupDir)) {
      return;
    }
    
    const files = fs.readdirSync(config.backupDir)
      .filter(file => file.endsWith('.db'))
      .map(file => {
        const filePath = path.join(config.backupDir, file);
        const stats = fs.statSync(filePath);
        return {
          name: file,
          path: filePath,
          created: stats.birthtime,
          size: stats.size
        };
      })
      .sort((a, b) => new Date(b.created) - new Date(a.created));
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à—ñ –∑–∞ retentionDays
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - config.retentionDays);
    
    const filesToDelete = files.filter(file => new Date(file.created) < cutoffDate);
    filesToDelete.forEach(file => {
      try {
        fs.unlinkSync(file.path);
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π backup: ${file.name}`);
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ${file.name}:`, error);
      }
    });
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Ñ–∞–π–ª–∏ —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ –Ω—ñ–∂ maxBackups
    if (files.length > config.maxBackups) {
      const excessFiles = files.slice(config.maxBackups);
      excessFiles.forEach(file => {
        try {
          fs.unlinkSync(file.path);
          console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–π–≤–∏–π backup: ${file.name}`);
        } catch (error) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ${file.name}:`, error);
        }
      });
    }
    
    console.log(`üßπ –û—á–∏—â–µ–Ω–Ω—è backup –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–æ ${filesToDelete.length + Math.max(0, files.length - config.maxBackups)} —Ñ–∞–π–ª—ñ–≤`);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è backup —Ñ–∞–π–ª—ñ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ backup
function getBackupStats() {
  try {
    if (!fs.existsSync(config.backupDir)) {
      return {
        totalBackups: 0,
        totalSize: 0,
        oldestBackup: null,
        newestBackup: null
      };
    }
    
    const files = fs.readdirSync(config.backupDir)
      .filter(file => file.endsWith('.db'))
      .map(file => {
        const filePath = path.join(config.backupDir, file);
        const stats = fs.statSync(filePath);
        return {
          name: file,
          size: stats.size,
          created: stats.birthtime
        };
      });
    
    const totalSize = files.reduce((sum, file) => sum + file.size, 0);
    const sortedFiles = files.sort((a, b) => new Date(a.created) - new Date(b.created));
    
    return {
      totalBackups: files.length,
      totalSize: totalSize,
      oldestBackup: sortedFiles.length > 0 ? sortedFiles[0] : null,
      newestBackup: sortedFiles.length > 0 ? sortedFiles[sortedFiles.length - 1] : null,
      files: files
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ backup:', error);
    return null;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
module.exports = {
  createBackup,
  cleanupOldBackups,
  getBackupStats,
  config
};

// –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
if (require.main === module) {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ backup...');
  const result = createBackup();
  
  if (result.success) {
    console.log('‚úÖ Backup —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    console.log(`üìÅ –§–∞–π–ª: ${result.filename}`);
    console.log(`üìä –†–æ–∑–º—ñ—Ä: ${(result.size / 1024 / 1024).toFixed(2)} MB`);
  } else {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è backup:', result.error);
    process.exit(1);
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = getBackupStats();
  if (stats) {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ backup:');
    console.log(`üì¶ –í—Å—å–æ–≥–æ backup —Ñ–∞–π–ª—ñ–≤: ${stats.totalBackups}`);
    console.log(`üíæ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: ${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`);
    if (stats.newestBackup) {
      console.log(`üÜï –ù–∞–π–Ω–æ–≤—ñ—à–∏–π: ${stats.newestBackup.name}`);
    }
    if (stats.oldestBackup) {
      console.log(`üóìÔ∏è –ù–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π: ${stats.oldestBackup.name}`);
    }
  }
}

